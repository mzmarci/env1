pipeline {
    agent any

    parameter {
        choice (name: "TARGET_ENV", choices: ["dev"/"sit"], description: "target deployment environment")
    }

     environment {
        AWS_ACCESS_KEY_ID = credentials ('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials ('AWS_SECRET_ACCESS_KEY')
     }

     stages {
        stage ("download codebase1 and env1 config") {
            steps {
                sh 'git clone https://github.com/mzmarci/codebase1.git'
                sh 'git clone https://github.com/mzmarci/env1.git'
            }
        }
        stage ('plan') {
            steps {
                sh '''
                cd codebase1
                terraform init -backend-config=../env1/"${TARGET_ENV}"/backend.tfvars
                terraform plan -var-file ../env1/"${TARGET_ENV}"/backend.tfvars -var-file ../env1/"${TARGET_ENV}"/ec2.tfvars
                    '''

            script {
                env.NEXT_STEP = input message: 'implement plan ?', ok: 'implement',
                parameters: [choice (name: 'implement', choices: 'apply/ndestroy/ndo nothing', description: 'implementation stage')]
            }        
          }
        }
        stage ('implement') {
            when {
                anyOf {
                    expression {
                       env.NEXT_STEP == 'apply'
                    }
                    expression {
                        env.NEXT_STEP == 'destroy'
                    }
                }
            }
            steps {
                sh '''
                  cd codebase1
                  terraform init -backend-config=../env1/"${TARGET_ENV}"/backend.tfvars
                terraform apply -var-file ../env1/"${TARGET_ENV}"/backend.tfvars -var-file ../env1/"${TARGET_ENV}"/ec2.tfvars -auto-approve
                    '''
            }
        }
     }

     post {
        always {
            deleteDir()
        }
     }
}